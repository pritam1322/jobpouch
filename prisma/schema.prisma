// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String?
  name                 String?
  image                String?
  emailVerified        DateTime?             @map(name: "email_verified")
  userType             String?
  razorpayCustomerId     String?               @unique
  razorpaySubscriptionId String?
  subscriptionStatus    String?
  subscriptionPlan      String?
  applications         JobApplication[] // Relation to JobApplication
  Account              Account[]
  Subscription         SubscriptionDetails[]
  Skills               Skill[]
  EmailTemplates       EmailTemplate[]
  AICred               AICred[]
  @@map("candidates") // Maps this model to the 'candidates' table in the database
}

model JobApplication {
  id             Int      @id @default(autoincrement())
  candidateId    Int // Foreign key for the User
  jobTitle       String
  companyName    String
  status         String // e.g., Applied, Interviewing, Offer, etc.
  appliedDate    DateTime @default(now())
  referralPerson String?
  jobLink        String
  techguid       String?

  User User @relation(fields: [candidateId], references: [id]) // Relation to User model
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  userId            Int // Changed to Int to match User ID type
  user              User    @relation(fields: [userId], references: [id]) // Relation to User model

  @@unique([provider, providerAccountId]) // Composite key for provider and account ID
  @@index([userId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model SubscriptionDetails {
  id                          String    @id @default(cuid())
  userId                      Int
  razorpaySubscriptionId      String    @unique // Stripe Subscription ID
  razorpayPaymentId           String?
  razorpayOrderId             String?
  razorpaySignature           String? 
  status                      String // Subscription status (e.g., active, canceled)
  currentPeriodStart          DateTime?
  currentPeriodEnd            DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  user                        User      @relation(fields: [userId], references: [id])
}


model Skill {
  id     Int    @id @default(autoincrement())
  userId Int
  skills String

  User User @relation(fields: [userId], references: [id]) // Relation to User model
}

model EmailTemplate {
  id               String   @id @default(cuid())
  name             String
  emailtemplate    String
  linkedintemplate String
  userId           Int      @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [userId], references: [id])
}

model AICred {
  id               String    @id @default(cuid())
  userId           Int       @unique
  count            Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User     @relation(fields: [userId], references: [id])
}
 